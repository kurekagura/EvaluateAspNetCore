@page
@model WebApp.Pages.AspForm.IndexModel
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf

@{
    var handlerUrl = Url.Page(pageName: "/AspForm/Index", pageHandler: "FormData");
    // var oldCookieTokenAndHeader = Xsrf.GetAndStoreTokens(Context);
    // Xsrf.ClearTokenSet(Context);

    // APluginForm APluginForm = new APluginForm();
    // APluginForm.name_YesNoItems = new(){
    //         new MyYesNo { id = "yes", caption = "はい" },
    //         new MyYesNo { id = "no", caption = "いいえ" },
    //         new MyYesNo { id = "neither", caption = "どっちゃでもない" }
    //     };
    var aPluginForm = new APluginForm();
    var bPluginForm = new BPluginForm();
}

<h4>asp-for</h4>

@section Heads{
    <style>
        form {
            border: solid 1px red;
        }
    </style>
}

<img src="" id="IdImg" />

<h5>プラグインA</h5>
<partial name="_PartialPluginA" model="aPluginForm" />

<h5>プラグインB</h5>
<partial name="_PartialPluginB" model="bPluginForm" />

<button type="button" id="IdPostBT">type="button"</button>

<img src="" id="IdResponseImg" />

@section Scripts{

    <script src="~/lib/form-data-json-convert/dist/form-data-json.min.js"></script>
    <script>

        function formChanged() {
            console.log('formChanged');
        }

        $(async () => {

            //↓checkbox問題回避策
            const $form_b = $('.my-plugin-b').find('form:first');
            const checkboxes = $form_b.find('input[type="checkbox"]');
            checkboxes.each(function () {
                var nameAttr = $(this).attr('name');
                // input type="hidden"かつ同じname属性を持つ要素を削除
                $form_b.find('input[type="hidden"][name="' + nameAttr + '"]').remove();
            });
            //↑

            const blob = await fetchBlobFromUrlAsync('/tensai_vegetable.png');
            const imgElement = document.getElementById('IdImg');
            imgElement.src = URL.createObjectURL(blob);

            $('#IdPostBT').on('click', function () {
                const $form_a = $('.my-plugin-a').find('form:first');
                const $form_b = $('.my-plugin-b').find('form:first');

                const fd_a = new FormData($form_a.get(0)); //引数はDOM要素
                const fd_b = new FormData($form_b.get(0));
                //deleteUnneededFromFormData(fd_a);
                //deleteUnneededFromFormData(fd_b);

                // for (var pair of fd_a.entries()) {
                //     console.log(pair[0] + ': ' + pair[1]);
                // }

                console.log('生のformdata:');
                for (var pair of fd_b.entries()) {
                    console.log(pair[0] + ': ' + pair[1]);
                }

                //これも値が全てstringになる。
                // const jstr_a = JSON.stringify(Object.fromEntries(fd_a.entries()));
                //const jstr_b = JSON.stringify(Object.fromEntries(fd_b.entries()));

                //これも値が全てstringになる。
                // const jsonObject = {};
                // fd_a.forEach((value, key) => {
                //     jsonObject[key] = value;
                // });
                // const jstr_a = JSON.stringify(jsonObject);

                const jObja = FormDataJson.toJson($form_a, {
                    inputFilter: formDataToJsonFilter
                });
                // console.log('jObja', jObja);
                const jstr_a = JSON.stringify(jObja);
                //console.log('str_a', jstr_a);

                const jObjb = FormDataJson.toJson($form_b, {
                    inputFilter: formDataToJsonFilter,
                    uncheckedValue: "false"
                    // arrayify: true
                }); // with jQuery
                // console.log('jObjb', jObjb);
                const jstr_b = JSON.stringify(jObjb);
                console.log('加工後JSONのformdata-->:');
                console.log('str_b', jstr_b);

                const newFd = new FormData();
                newFd.append('plugins[0]', 'my-plugin-a:' + jstr_a);
                //nullやundefindをしていると文字列としてバインドされる。
                //またindexを飛ばすと以降のindexはバインドされないので注意。
                //newFd.append('plugins[1]', null);
                newFd.append('plugins[1]', 'my-plugin-b:' + jstr_b);
                //サーバサイドでjsonデシリアライズ型を判断するため、prefix:を付けておく。

                //console.log(blob);
                newFd.append('binary', blob);

                fetch('@handlerUrl', {
                    method: 'POST',
                    body: newFd
                }).then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.blob();
                }).then(blob => {
                    const img = document.getElementById("IdResponseImg");
                    img.src = URL.createObjectURL(blob);
                }).catch(error => {
                    console.error(error);
                });
            });
        });

    </script>
}
